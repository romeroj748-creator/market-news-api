To implement a Market News API that fetches news data from multiple sources (like CNBC, Nasdaq, etc.) and processes them with metadata, we'll use Node.js with Express and WebSockets for live news updates.

Here’s an example structure and code to get you started.


---

Directory Structure:

/market-news-api
│── /config/                 # Configuration files (e.g., API keys, sources)
│── /data/                   # Storage for raw data (e.g., stations.txt, feeds.txt)
│── /src/                    # Main application code
│   ├── /controllers/        # API request handling
│   ├── /models/             # Data models and database interactions
│   ├── /services/           # Logic for scanning and saving news
│   ├── /sockets/            # WebSocket for real-time updates
│   ├── /utils/              # Utility functions (e.g., filters, date handling)
│   ├── app.js               # Express server setup
│── /logs/                   # Logs for the system (e.g., errors, requests)
│── package.json             # Project dependencies
│── README.md                # Documentation


---

1. Initialize Project and Install Dependencies

mkdir market-news-api
cd market-news-api
npm init -y
npm install express axios ws moment


---

2. Express Server Setup (app.js)

const express = require('express');
const WebSocket = require('ws');
const moment = require('moment');
const { scanNews, fetchNews } = require('./services/newsService');

const app = express();
const port = 3000;

// WebSocket Setup for Real-Time News Feed
const wss = new WebSocket.Server({ port: 8080 });
wss.on('connection', ws => {
    console.log('Client connected');
    ws.send('Welcome to the live news feed!');
});

// Periodically scan for new news (every 60 seconds)
setInterval(() => {
    scanNews();  // Function that scans and saves news
}, 60000);

// API endpoint to fetch the news
app.get('/api/news', (req, res) => {
    const { station, channel, dateStart, dateEnd, titleContains } = req.query;
    fetchNews({ station, channel, dateStart, dateEnd, titleContains })
        .then(news => res.json(news))
        .catch(error => res.status(500).json({ error: error.message }));
});

// Start Express server
app.listen(port, () => {
    console.log(`Market News API is running at http://localhost:${port}`);
});


---

3. News Service (newsService.js)

const axios = require('axios');
const fs = require('fs');
const moment = require('moment');
const { sendToWebSocket } = require('../sockets/webSocketService');

// Function to simulate news scanning and saving data (in a real implementation, use an actual API)
const scanNews = async () => {
    try {
        // Example: Fetching news from an external API
        const newsSources = ['CNBC', 'Nasdaq', 'Wallstreet Journal'];
        const newsData = await Promise.all(newsSources.map(source => fetchNewsFromSource(source)));

        // Saving to stations.txt (this should be replaced with an actual database)
        fs.appendFileSync('data/stations.txt', JSON.stringify(newsData) + '\n');

        // Send new news to WebSocket clients
        newsData.forEach(article => sendToWebSocket(article));

        console.log('New articles have been added to the database.');
    } catch (error) {
        console.error('Error scanning news:', error);
    }
};

// Simulate fetching news from a given source (replace with actual API calls)
const fetchNewsFromSource = async (source) => {
    const mockArticles = [
        { title: `Breaking News from ${source}`, content: 'Sample content', date: moment().format('MM/DD/YYYY') }
    ];
    return mockArticles;
};

// Function to fetch saved news from database (stations.txt)
const fetchNews = async ({ station, channel, dateStart, dateEnd, titleContains }) => {
    try {
        const data = fs.readFileSync('data/stations.txt', 'utf-8');
        const articles = data.split('\n').map(line => JSON.parse(line)).flat();

        // Apply filters
        const filteredArticles = articles.filter(article => {
            return (
                (!station || article.source === station) &&
                (!channel || article.channel === channel) &&
                (!dateStart || moment(article.date, 'MM/DD/YYYY').isAfter(dateStart)) &&
                (!dateEnd || moment(article.date, 'MM/DD/YYYY').isBefore(dateEnd)) &&
                (!titleContains || article.title.toLowerCase().includes(titleContains.toLowerCase()))
            );
        });

        return filteredArticles;
    } catch (error) {
        throw new Error('Error fetching news:', error);
    }
};

module.exports = { scanNews, fetchNews };


---

4. WebSocket Service (webSocketService.js)

const WebSocket = require('ws');

// WebSocket server instance
const wss = new WebSocket.Server({ port: 8080 });

// Function to send articles to WebSocket clients
const sendToWebSocket = (article) => {
    wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify(article));
        }
    });
};

module.exports = { sendToWebSocket };


---

5. Utility Functions (utils.js)

const moment = require('moment');

// Function to check if a date is valid
const isValidDate = (dateString) => {
    return moment(dateString, 'MM/DD/YYYY', true).isValid();
};

module.exports = { isValidDate };


---

6. Configuring and Running

1. Start the Server:

node src/app.js

This will run the API server on http://localhost:3000 and the WebSocket server on ws://localhost:8080.


2. WebSocket Client: You can connect to the WebSocket server using any WebSocket client (e.g., in the browser console):

const socket = new WebSocket('ws://localhost:8080');
socket.onmessage = (event) => {
    console.log('New article:', JSON.parse(event.data));
};


3. API Endpoint: The endpoint /api/news allows you to filter and fetch news articles. For example:

GET http://localhost:3000/api/news?station=CNBC&dateStart=01/01/2023




---

Explanation:

AutoScan: Every 60 seconds, the scanNews function runs, fetching news articles, saving them to stations.txt, and pushing updates to connected WebSocket clients.

WebSocket Integration: WebSocket is used for live, real-time updates on new articles.

Querying Data: The API allows you to filter and retrieve news articles based on various parameters like station, date, title, and content.

Data Storage: For simplicity, articles are saved in text files (stations.txt), but in a production environment, this should be replaced with a database.



---

Next Steps:

Implement real API calls instead of mock data.

Consider integrating a database (e.g., MongoDB or PostgreSQL) to store news data more efficiently.

Add more error handling and logging for production readiness.


Let me know if you'd like to further expand any part of this!

